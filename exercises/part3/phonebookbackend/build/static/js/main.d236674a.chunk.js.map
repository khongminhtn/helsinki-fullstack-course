{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","ErrorMessage","message","errorStyle","color","includes","fontSize","borderStyle","borderRadius","padding","style","length","Filter","props","onChange","filterNames","PersonForm","updateNewName","updateNewNum","onClick","addPerson","type","Persons","filteredNames","persons","map","person","name","number","deletePerson","namesToDisplay","App","useState","setPersons","newName","setNewName","newNum","setNewNum","setFilteredNames","errorMessage","setErrorMessage","useEffect","personService","filter","toLowerCase","e","target","value","preventDefault","newPerson","existingPerson","find","undefined","setTimeout","concat","catch","error","window","confirm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d236674a.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl) // returns a promise\r\n    return request.then(response => response.data) // promise fulfilled, returns data\r\n}\r\n\r\nconst create = newObject => {\r\n    // then() is used as a way to chain operations after promise is fulfilled\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    // PUT requires pointing to a very specific address/URL\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteObject = id => {\r\n    // ID is used as an identifier to point to the specific resource\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deleteObject }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst ErrorMessage = ({message}) => {\n  const errorStyle = {\n    color: message.includes('Added') ? 'green' : 'red',\n    fontSize: 16,\n    borderStyle: 'solid',\n    borderRadius: 5,\n    padding: 10,\n  }\n  return(\n    <div style={message.length > 0 ? errorStyle : null}>\n      {message}\n    </div>\n  )\n}\n\nconst Filter = (props) => {\n  return(\n    <div>\n      <div>filter shown with <input onChange={props.filterNames}/></div>\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return(\n    <form>\n      <div>name: <input onChange={props.updateNewName}/></div>\n      <div>number: <input onChange={props.updateNewNum}/></div>\n      <div>\n        <button onClick={props.addPerson} type=\"submit\">add</button>\n      </div>\n  </form>\n  )\n}\n\nconst Persons = (props) => {\n  return (\n    <ul>\n      { \n        props.filteredNames === '' \n        ? props.persons.map(person => <li key={person.name}>{person.name} {person.number} <button onClick={() => props.deletePerson(person.id, person.name)}>delete</button></li>)\n        : props.namesToDisplay.map(person => <li key={person.name}>{person.name}<button onClick={() => props.deletePerson(person.id, person.name)}>delete</button></li>)\n      }\n    </ul>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNum, setNewNum ] = useState('')\n  const [ filteredNames, setFilteredNames ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState('')\n\n  // useEffect takes 2 parameters\n  //    one for Promise HTTP request\n  //    the other to define how often it is run\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(data => setPersons(data))\n  }, [])\n\n  const updateNewName = (e) => setNewName(e.target.value)\n  const updateNewNum = (e) => setNewNum(e.target.value)\n  const filterNames = (e) => setFilteredNames(e.target.value.toLowerCase())\n  const namesToDisplay = persons.filter(person => person.name.toLowerCase().includes(filteredNames))\n\n  // Request to add a person to database\n  const addPerson = (e) => {\n    e.preventDefault()\n    // concat method merges 2 arrays and generate a new compeleted array\n    // then replace persons with the newly merged array\n    const newPerson = { \n      name: newName,\n      number: newNum,\n    }\n    const existingPerson = persons.find(person => person.name === newName)\n    existingPerson === undefined\n    ? personService\n        .create(newPerson)\n        .then(data => {\n          setErrorMessage(`Added ${newPerson.name}`)\n          setTimeout(() => {\n            setErrorMessage('')\n          }, 5000)\n          setPersons(persons.concat(data))\n        })\n        .catch(error => {\n          setErrorMessage(`${error.response.data.error}`)\n          setTimeout(() => {\n            setErrorMessage('')\n          }, 5000)\n        })\n    : personService\n        .update(existingPerson.id, newPerson)\n        .then(data => {\n          window.confirm(`${newPerson.name} is already added to phonebook, replace the old number with a new one ?`)\n          setErrorMessage(`Number is replaced for ${existingPerson.name}`)\n          setTimeout(() => {\n            setErrorMessage('')\n          }, 5000)\n          setPersons(persons.map(person => person.id !== existingPerson.id ? person : data))\n        }).catch(() => {\n          setErrorMessage(`Information of ${newPerson.name} has already been removed`)\n          setTimeout(() => {\n            setErrorMessage('')\n          }, 5000)\n        })\n  }\n  // Request to delete a person in database\n  const deletePerson = (id, name) => {\n    personService\n      .deleteObject(id)\n      .then(() => {\n        window.confirm(`Delete ${name}`)\n        setErrorMessage(`Deleted ${name}`)\n        setTimeout(() => {\n          setErrorMessage('')\n        }, 5000)\n        setPersons(persons.filter(person => person.id !== id))\n      }).catch(() => {\n        setErrorMessage(`Information of ${name} has already been removed`)\n        setTimeout(() => {\n          setErrorMessage('')\n        }, 5000)\n      })\n  }\n\n  return(\n    <div>\n      <h2>Phonebook</h2>\n      <ErrorMessage message={errorMessage}/>\n      <Filter filterNames={filterNames}/>\n      <h2>add a new</h2>\n      <PersonForm\n        updateNewName={updateNewName}\n        updateNewNum={updateNewNum}\n        addPerson={addPerson}/>\n      <h2>Numbers</h2>\n      <Persons \n        persons={persons}\n        namesToDisplay={namesToDisplay}\n        filteredNames={filteredNames}\n        deletePerson={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}